{"version":3,"sources":["components/categories/category_titles.js","components/box_spaces/box_spaces.js","components/reward_row/reward_row.js","App.js","serviceWorker.js","index.js"],"names":["Categories","Array","fill","map","el","index","key","className","id","this","generateCategories","React","Component","BoxRow","draggedContainer","props","rowNum","drag","e","target","classList","dragged","cloneNode","document","createElement","draggable","add","appendChild","remove","deleteTag","innerHTML","onclick","ev","parentNode","drop","preventDefault","dragOver","childElementCount","dragDrop","sameRow","dragLeave","RewardRow","useEffect","rewardCards","querySelectorAll","empties","card","addEventListener","empty","App","Boolean","window","location","hostname","match","root","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a83b9a35.chunk.js","sourcesContent":["import React from 'react';\nimport './category_titles_styles.css';\n\nclass Categories extends React.Component {\n    generateCategories() {\n        // generates the category headers\n        const categories = new Array(5).fill(0);\n        return categories.map((el, index) => {\n            return (\n                <div key={index} className=\"title\">\n                    {`C${index + 1}`}\n                </div>\n            )\n        })\n    }\n\n    render() {\n        return(\n            <div id=\"title-container\">\n                {this.generateCategories()}\n            </div>\n        );\n    }\n}\n\n// const Categories = () => {\n// }\n\nexport default Categories;","import React from 'react';\nimport './box_spaces_styles.css';\n\nfunction generateRow(rowNum)  {\n    const row = new Array(5).fill(null);\n    return row.map((el, index) => {\n        return(\n            // space-row-col\n            <div key={index} className={`box-space reward-${rowNum} empty`}/>\n        )\n    })\n\n}\n\nfunction BoxRow(props) {\n    // the props will be an integer that indicates the reward number\n    return (\n        <div className={`reward-row-${props.rowNum} reward-place-container`}>\n            {generateRow(props.rowNum)}\n        </div>\n    )\n}\n\nexport default BoxRow;","import React, { useEffect } from 'react';\nimport BoxRow from '../box_spaces/box_spaces';\nimport './reward_row_styles.css';\n\n// will be the element being dragged\nlet draggedContainer;\n\n// when you start a drag\nfunction drag(e) {\n    // save the dragged element into a variable\n    if(e.target.classList[0] === \"reward-card\") {\n        let dragged = e.target.cloneNode(true);\n        // will make a container to have the dragged element and delete button\n        draggedContainer = document.createElement(\"div\");\n        // make the container draggable\n        draggedContainer.draggable = true;\n        // make it have the same name as the reward\n        for(let className of dragged.classList) {\n            draggedContainer.classList.add(className);\n        }\n        // remove the classname of the child\n        dragged.classList = '';\n        // make sure it's not draggable\n        dragged.draggable = false;\n        // add the child to the container\n        draggedContainer.appendChild(dragged);\n        draggedContainer.classList.remove(\"reward-card\");\n\n        // add the delete button\n        let deleteTag = document.createElement(\"button\");\n        deleteTag.innerHTML = \"delete\";\n        deleteTag.onclick = function(ev) {\n            ev.target.parentNode.parentNode.innerHTML = '';\n        }\n        draggedContainer.appendChild(deleteTag);\n    } else {\n        draggedContainer = e.target;\n    }\n}\n\n// when you cancel a drop\nfunction drop(e) {\n    e.preventDefault();\n}\n\n// when you drag over a valid drop zone\nfunction dragOver(e) {\n    e.preventDefault();\n    const onlyEmptySpace = (e.target.classList[0] === \"box-space\") && (e.target.childElementCount < 1);\n    if(onlyEmptySpace) {\n        e.target.classList.remove(\"filled\");\n        e.target.classList.add(\"empty\");\n    }\n}\n\nfunction dragDrop(e) {\n    e.preventDefault();\n    // prevents user from putting rewards in different rows\n    const sameRow = draggedContainer.classList[0] === e.target.classList[1];\n    if((e.target.classList[2] == \"empty\") && sameRow) {\n        // if it's empty, add it\n        e.target.classList.remove(\"empty\");\n        e.target.classList.add(\"filled\");\n        // drop the dragged element\n        e.target.appendChild(draggedContainer);\n    }\n}\n\nfunction dragLeave(e) {\n    e.preventDefault();\n}\n\n\nfunction RewardRow(props) {\n\n    // use to get the reward-card object after it is rendered\n    useEffect(() => {\n        let rewardCards = document.querySelectorAll('.reward-card');\n        let empties = document.querySelectorAll('.empty');\n\n        // allows the cards to be dragged and dropped\n        for(let card of rewardCards) {\n            card.addEventListener('dragstart', drag);\n            card.addEventListener('dragend', drop);\n        }\n\n        // allows the empty spaces to receive the dragged and dropped cards\n        for(let empty of empties) {\n            empty.addEventListener('dragover', dragOver);\n            empty.addEventListener('drop', dragDrop);\n            empty.addEventListener('dragstart', drag);\n            empty.addEventListener('dragleave', dragLeave);\n        }\n    })\n\n    const { rowNum } = props;\n    return (\n        <section className=\"reward-row\">\n            <div className={`reward-col reward-${rowNum}`}>\n                <div className={`reward-card reward-${rowNum}`} draggable=\"true\">\n                    {`R${rowNum}`}\n                </div>\n            </div>\n            <div className=\"box-space-container\">\n                <BoxRow rowNum={rowNum}/>\n            </div>\n        </section>\n    )\n};\n\nexport default RewardRow;","import React from 'react';\nimport './App.css';\nimport Categories from './components/categories/category_titles';\nimport RewardRow from './components/reward_row/reward_row';\n\nfunction generateRows() {\n    const rows = new Array(5).fill(0);\n    return rows.map((el, index) => {\n      return <RewardRow key={index} rowNum={index + 1}/>\n    })\n}\n\nfunction App() {\n  return (\n    <main id=\"board\">\n      <header>\n        <section id=\"rewards\">\n          <h2>Rewards</h2>\n        </section>\n        <section id=\"categories\">\n          <h2>Categories</h2>\n          <Categories/>\n        </section>\n      </header>\n      {generateRows()}\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const root = document.getElementById('root');\n  ReactDOM.render( <App />, root);\n})\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}